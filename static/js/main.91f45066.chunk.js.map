{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["GstLbetCalculator","amount","setAmount","useState","gstRate","setGstRate","lbetPer","setLbetPer","tmc","setTMC","gstAmount","setGstAmount","gstPeramt","setGstPeramt","gstValue","setGstValue","netAmount","setNetAmount","netValue","setNetValue","lbet","setLbet","lbetPeramt","setLbetPeramt","lbetValue","setLbetValue","tmcInput","setTMCInput","useEffect","calculateValues","Amount","parseFloat","parsedGstRate","parsedLbetPer","parsedTMC","calculatedGstAmount","calculatedGstPeramt","calculatedGstValue","calculatedNetAmount","calculatedLbet","calculatedLbetPeramt","calculatedLbetValue","calculatedNetValue","isNaN","calculatedGstValueResult","calculatedLbetValueResult","calculatedTMCResult","calculatedGstAmountResult","toFixed","React","createElement","Fragment","className","type","value","onChange","event","target","onBlur","handleTMCBlur","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.91f45066.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst GstLbetCalculator = () => {\n  const [amount, setAmount] = useState(100);\n  const [gstRate, setGstRate] = useState(18);\n  const [lbetPer, setLbetPer] = useState(8);\n  const [tmc, setTMC] = useState(4);\n\n  const [gstAmount, setGstAmount] = useState(0);\n  const [gstPeramt, setGstPeramt] = useState(0);\n  const [gstValue, setGstValue] = useState(0);\n\n  const [netAmount, setNetAmount] = useState(0);\n  const [netValue, setNetValue] = useState('');\n\n  const [lbet, setLbet] = useState(0);\n  const [lbetPeramt, setLbetPeramt] = useState(0);\n  const [lbetValue, setLbetValue] = useState(0);\n\n  const [tmcInput, setTMCInput] = useState(tmc);\n\n  const calculateValues = () => {\n    const Amount = parseFloat(amount);\n    const parsedGstRate = parseFloat(gstRate);\n    const parsedLbetPer = parseFloat(lbetPer);\n    const parsedTMC = parseFloat(tmcInput);\n\n    const calculatedGstAmount = Amount * parsedGstRate;\n    const calculatedGstPeramt = parsedGstRate + 100;\n    const calculatedGstValue = calculatedGstAmount / calculatedGstPeramt;\n\n    const calculatedNetAmount = Amount - parsedTMC - calculatedGstValue;\n\n    const calculatedLbet = calculatedNetAmount * parsedLbetPer;\n    const calculatedLbetPeramt = parsedLbetPer + 100;\n    const calculatedLbetValue = calculatedLbet / calculatedLbetPeramt;\n\n    // Check if calculated values are valid numbers, otherwise set them to 0\n    const calculatedNetValue = isNaN(calculatedLbetValue) ? 0 : Amount - parsedTMC - calculatedGstValue - calculatedLbetValue;\n    const calculatedGstValueResult = isNaN(calculatedGstValue) ? 0 : calculatedGstValue;\n    const calculatedLbetValueResult = isNaN(calculatedLbetValue) ? 0 : calculatedLbetValue;\n    const calculatedTMCResult = isNaN(parsedTMC) ? 0 : parsedTMC;\n    const calculatedGstAmountResult = isNaN(calculatedGstAmount) ? 0 : calculatedGstAmount;\n\n    setGstAmount(calculatedGstAmountResult.toFixed(2));\n    setGstPeramt(calculatedGstPeramt.toFixed(2));\n    setGstValue(calculatedGstValueResult.toFixed(2));\n\n    setNetAmount(calculatedNetAmount.toFixed(2));\n    setNetValue(calculatedNetValue.toFixed(2));\n\n    setLbet(calculatedLbet.toFixed(2));\n    setLbetPeramt(calculatedLbetPeramt.toFixed(2));\n    setLbetValue(calculatedLbetValueResult.toFixed(2));\n    setTMC(calculatedTMCResult.toFixed(2));\n  };\n\n  useEffect(() => {\n    calculateValues();\n  }, [amount, gstRate, lbetPer, tmcInput]);\n\n  const handleAmountChange = (event) => {\n    setAmount(event.target.value);\n  };\n\n  const handleGstRateChange = (event) => {\n    setGstRate(event.target.value);\n  };\n\n  const handleLbetPerChange = (event) => {\n    setLbetPer(event.target.value);\n  };\n\n  const handleTMCInputChange = (event) => {\n    setTMCInput(event.target.value);\n  };\n\n  const handleTMCBlur = () => {\n    setTMC(tmcInput);\n  };\n\n  return (\n    <>\n    <div className=\"header-container\">\n      <h1>GST & LBET Calculator</h1>\n      </div>\n      <div className=\"calculator-container\">\n      <label>\n        Enter Amount:\n        <div className=\"getvalue\">\n        <p>â‚¹</p>\n        <input type=\"number\" value={amount} onChange={handleAmountChange} />\n        </div>\n      </label>\n      <br />\n      <label>\n        GST Rate (%):\n        <div className=\"getvalue\">\n        <input type=\"number\" value={gstRate} onChange={handleGstRateChange} />\n        <p>%</p> \n        </div>\n      </label>\n      <br />\n      <label>\n        LBET (%):\n        <div className=\"getvalue\">\n        <input type=\"number\" value={lbetPer} onChange={handleLbetPerChange} />\n        <p>%</p> \n        </div>\n      </label>\n      <br />\n      <label>\n        TMC:\n        <div className=\"getvalue\">\n        <input type=\"number\" value={tmcInput} onChange={handleTMCInputChange} onBlur={handleTMCBlur} />\n        </div>\n      </label>\n      <br />\n      </div>\n      {/* <div>\n        <strong>GST Amount:</strong> {gstAmount}\n      </div> */}\n      <div className=\"result-container\">      \n      <div className=\"result-Value\">\n        <strong>Net Amount:</strong> \n        <p>{netValue}</p>\n      </div>\n      <div className=\"result-Value\">\n        <strong>TMC:</strong> \n        <p>{tmc}</p>\n      </div>\n      <div className=\"result-Value\">\n        <strong>GST Value:</strong> \n        <p>{gstValue}</p>\n      </div>\n      <div className=\"result-Value\">\n        <strong>LBET Value:</strong> \n        <p>{lbetValue}</p>\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default GstLbetCalculator;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}